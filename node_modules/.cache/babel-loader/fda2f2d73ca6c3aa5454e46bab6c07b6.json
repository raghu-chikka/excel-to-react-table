{"ast":null,"code":"var _jsxFileName = \"H:\\\\DigiKull Front-End\\\\FrontEndDev\\\\FrontEndDev2\\\\ennea-assignment\\\\exceltoreacttable\\\\src\\\\components\\\\Readfile.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport XLSX from \"xlsx\";\nimport Showdata from \"./Showdata\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Readfile = () => {\n  _s();\n\n  const [sheetitems, setSheetitems] = useState([]);\n\n  const readExcelFile = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        const workBook = XLSX.read(bufferArray, {\n          type: \"buffer\"\n        });\n        const worksheetname = workBook.SheetNames[0];\n        const workSheet = workBook.Sheets[worksheetname];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(data => {\n      setSheetitems(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => {\n          const file = e.target.files[0];\n          readExcelFile(file);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Readfile, \"J/i6LcsMQHmEx2md58pnoMPchzA=\");\n\n_c = Readfile;\nexport default Readfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Readfile\");","map":{"version":3,"sources":["H:/DigiKull Front-End/FrontEndDev/FrontEndDev2/ennea-assignment/exceltoreacttable/src/components/Readfile.jsx"],"names":["React","useState","Table","XLSX","Showdata","Readfile","sheetitems","setSheetitems","readExcelFile","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","workBook","read","type","worksheetname","SheetNames","workSheet","Sheets","data","utils","sheet_to_json","onerror","error","then","files"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMO,aAAa,GAAIC,IAAD,IAAU;AAC9B,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C,YAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,MAAAA,UAAU,CAACE,iBAAX,CAA6BP,IAA7B;;AACAK,MAAAA,UAAU,CAACG,MAAX,GAAqBC,CAAD,IAAO;AACzB,cAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B;AACA,cAAMC,QAAQ,GAAGnB,IAAI,CAACoB,IAAL,CAAUJ,WAAV,EAAuB;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAvB,CAAjB;AACA,cAAMC,aAAa,GAAGH,QAAQ,CAACI,UAAT,CAAoB,CAApB,CAAtB;AACA,cAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAT,CAAgBH,aAAhB,CAAlB;AACA,cAAMI,IAAI,GAAG1B,IAAI,CAAC2B,KAAL,CAAWC,aAAX,CAAyBJ,SAAzB,CAAb;AACAf,QAAAA,OAAO,CAACiB,IAAD,CAAP;AACD,OAPD;;AAQAf,MAAAA,UAAU,CAACkB,OAAX,GAAsBC,KAAD,IAAW;AAC9BpB,QAAAA,MAAM,CAACoB,KAAD,CAAN;AACD,OAFD;AAGD,KAde,CAAhB;AAeAvB,IAAAA,OAAO,CAACwB,IAAR,CAAcL,IAAD,IAAU;AACrBtB,MAAAA,aAAa,CAACsB,IAAD,CAAb;AACD,KAFD;AAGD,GAnBD;;AAqBA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,QAAQ,EAAGX,CAAD,IAAO;AACf,gBAAMT,IAAI,GAAGS,CAAC,CAACE,MAAF,CAASe,KAAT,CAAe,CAAf,CAAb;AACA3B,UAAAA,aAAa,CAACC,IAAD,CAAb;AACD;AALH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAcD,CAtCD;;GAAMJ,Q;;KAAAA,Q;AAwCN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport XLSX from \"xlsx\";\r\nimport Showdata from \"./Showdata\";\r\n\r\nconst Readfile = () => {\r\n  const [sheetitems, setSheetitems] = useState([]);\r\n \r\n  const readExcelFile = (file) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsArrayBuffer(file);\r\n      fileReader.onload = (e) => {\r\n        const bufferArray = e.target.result;\r\n        const workBook = XLSX.read(bufferArray, { type: \"buffer\" });\r\n        const worksheetname = workBook.SheetNames[0];\r\n        const workSheet = workBook.Sheets[worksheetname];\r\n        const data = XLSX.utils.sheet_to_json(workSheet);\r\n        resolve(data);\r\n      };\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n    promise.then((data) => {\r\n      setSheetitems(data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <input\r\n          type=\"file\"\r\n          onChange={(e) => {\r\n            const file = e.target.files[0];\r\n            readExcelFile(file);\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Readfile;\r\n"]},"metadata":{},"sourceType":"module"}