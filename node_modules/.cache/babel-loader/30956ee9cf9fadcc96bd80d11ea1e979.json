{"ast":null,"code":"var _jsxFileName = \"H:\\\\DigiKull Front-End\\\\FrontEndDev\\\\FrontEndDev2\\\\ennea-assignment\\\\exceltoreacttable\\\\src\\\\components\\\\Readfile.js\";\nimport React from 'react';\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Readfile = () => {\n  function Upload() {\n    const fileUpload = document.getElementById('fileUpload');\n    const regex = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n\n    if (regex.test(fileUpload.value.toLowerCase())) {\n      let fileName = fileUpload.files[0].name;\n\n      if (typeof FileReader !== 'undefined') {\n        const reader = new FileReader();\n\n        if (reader.readAsBinaryString) {\n          reader.onload = e => {\n            processExcel(reader.result);\n          };\n\n          reader.readAsBinaryString(fileUpload.files[0]);\n        }\n      } else {\n        console.log(\"This browser does not support HTML5.\");\n      }\n    } else {\n      console.log(\"Please upload a valid Excel file.\");\n    }\n  }\n\n  function processExcel(data) {\n    const workbook = XLSX.read(data, {\n      type: 'binary'\n    });\n    const firstSheet = workbook.SheetNames[0];\n    const excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);\n    console.log(excelRows);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: Upload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Readfile;\nexport default Readfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Readfile\");","map":{"version":3,"sources":["H:/DigiKull Front-End/FrontEndDev/FrontEndDev2/ennea-assignment/exceltoreacttable/src/components/Readfile.js"],"names":["React","XLSX","Readfile","Upload","fileUpload","document","getElementById","regex","test","value","toLowerCase","fileName","files","name","FileReader","reader","readAsBinaryString","onload","e","processExcel","result","console","log","data","workbook","read","type","firstSheet","SheetNames","excelRows","utils","sheet_to_row_object_array","Sheets"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAEnB,WAASC,MAAT,GAAkB;AACd,UAAMC,UAAU,GAAIC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAApB;AACA,UAAMC,KAAK,GAAG,uCAAd;;AACA,QAAIA,KAAK,CAACC,IAAN,CAAWJ,UAAU,CAACK,KAAX,CAAiBC,WAAjB,EAAX,CAAJ,EAAgD;AAC5C,UAAIC,QAAQ,GAAGP,UAAU,CAACQ,KAAX,CAAiB,CAAjB,EAAoBC,IAAnC;;AACA,UAAI,OAAQC,UAAR,KAAwB,WAA5B,EAAyC;AACrC,cAAMC,MAAM,GAAG,IAAID,UAAJ,EAAf;;AACA,YAAIC,MAAM,CAACC,kBAAX,EAA+B;AAC3BD,UAAAA,MAAM,CAACE,MAAP,GAAiBC,CAAD,IAAO;AACnBC,YAAAA,YAAY,CAACJ,MAAM,CAACK,MAAR,CAAZ;AACH,WAFD;;AAGAL,UAAAA,MAAM,CAACC,kBAAP,CAA0BZ,UAAU,CAACQ,KAAX,CAAiB,CAAjB,CAA1B;AACH;AACJ,OARD,MAQO;AACHS,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACH;AACJ,KAbD,MAaO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH;AACJ;;AAED,WAASH,YAAT,CAAsBI,IAAtB,EAA4B;AACxB,UAAMC,QAAQ,GAAGvB,IAAI,CAACwB,IAAL,CAAUF,IAAV,EAAgB;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAhB,CAAjB;AACA,UAAMC,UAAU,GAAGH,QAAQ,CAACI,UAAT,CAAoB,CAApB,CAAnB;AACA,UAAMC,SAAS,GAAG5B,IAAI,CAAC6B,KAAL,CAAWC,yBAAX,CAAqCP,QAAQ,CAACQ,MAAT,CAAgBL,UAAhB,CAArC,CAAlB;AAEAN,IAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ;AACH;;AAED,sBACI;AAAA,2BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE1B;AAA7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CApCD;;KAAMD,Q;AAsCN,eAAeA,QAAf","sourcesContent":["import React from 'react';\r\nimport XLSX from \"xlsx\";\r\n\r\nconst Readfile = () => {\r\n\r\n    function Upload() {\r\n        const fileUpload = (document.getElementById('fileUpload'));\r\n        const regex = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\r\n        if (regex.test(fileUpload.value.toLowerCase())) {\r\n            let fileName = fileUpload.files[0].name;\r\n            if (typeof (FileReader) !== 'undefined') {\r\n                const reader = new FileReader();\r\n                if (reader.readAsBinaryString) {\r\n                    reader.onload = (e) => {\r\n                        processExcel(reader.result);\r\n                    };\r\n                    reader.readAsBinaryString(fileUpload.files[0]);\r\n                }\r\n            } else {\r\n                console.log(\"This browser does not support HTML5.\");\r\n            }\r\n        } else {\r\n            console.log(\"Please upload a valid Excel file.\");\r\n        }\r\n    }\r\n    \r\n    function processExcel(data) {\r\n        const workbook = XLSX.read(data, {type: 'binary'});\r\n        const firstSheet = workbook.SheetNames[0];\r\n        const excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);\r\n    \r\n        console.log(excelRows);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" onChange={Upload}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Readfile\r\n"]},"metadata":{},"sourceType":"module"}