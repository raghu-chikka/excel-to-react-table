{"ast":null,"code":"var _jsxFileName = \"H:\\\\DigiKull Front-End\\\\FrontEndDev\\\\FrontEndDev2\\\\ennea-assignment\\\\exceltoreacttable\\\\src\\\\components\\\\Readfile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Readfile = () => {\n  _s();\n\n  const [sheetitems, setSheetitems] = useState();\n\n  const readExcelFile = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        const workBook = XLSX.read(bufferArray, {\n          type: 'buffer'\n        });\n        const worksheetname = workBook.SheetNames[0];\n        const workSheet = workBook.Sheets[worksheetname];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(data => {\n      setSheetitems(data); // console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => {\n          const file = e.target.files[0];\n          readExcelFile(file);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        size: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Invoice Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Invoice Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Packing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actual Rate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sheetitems.map(newitem => {\n            /*#__PURE__*/\n            _jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: newitem.C\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: newitem.D\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: newitem.F\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: newitem.G\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: newitem.O\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: newitem.U\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 7\n              }, this)]\n            }, newitem, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 6\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Readfile, \"9T+kj6wbuPegUKRyp1p6MYAiAc4=\");\n\n_c = Readfile;\nexport default Readfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Readfile\");","map":{"version":3,"sources":["H:/DigiKull Front-End/FrontEndDev/FrontEndDev2/ennea-assignment/exceltoreacttable/src/components/Readfile.js"],"names":["React","useState","Table","XLSX","Readfile","sheetitems","setSheetitems","readExcelFile","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","workBook","read","type","worksheetname","SheetNames","workSheet","Sheets","data","utils","sheet_to_json","onerror","error","then","files","map","newitem","C","D","F","G","O","U"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport XLSX from 'xlsx';\r\n\r\nconst Readfile = () => {\r\n\r\n    const [sheetitems, setSheetitems] = useState();\r\n\r\n    const readExcelFile = (file) => {\r\n\r\n        const promise = new Promise ((resolve, reject)=>{\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload=(e)=>{\r\n                const bufferArray = e.target.result;\r\n                const workBook = XLSX.read(bufferArray, {type: 'buffer'});\r\n                const worksheetname = workBook.SheetNames[0];\r\n                const workSheet = workBook.Sheets[worksheetname];\r\n                const data = XLSX.utils.sheet_to_json(workSheet);\r\n                resolve(data);\r\n            };\r\n                fileReader.onerror = (error) => {\r\n                    reject(error);\r\n                };\r\n        });\r\n        promise.then((data) => {\r\n            setSheetitems(data);\r\n            // console.log(data);\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n        <div className='container'>\r\n            <input type=\"file\" onChange={(e)=>{\r\n                const file = e.target.files[0];\r\n                readExcelFile(file);\r\n            }} />\r\n        </div>\r\n        <div>\r\n        <Table striped bordered hover size=\"sm\">\r\n  <thead>\r\n    <tr>\r\n      <th>Invoice Number</th>\r\n      <th>Invoice Date</th>\r\n      <th>Product Name</th>\r\n      <th>Packing</th>\r\n      <th>Actual Rate</th>\r\n      <th>Quantity</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n      {\r\n          sheetitems.map((newitem)=>{\r\n     <tr key={newitem}>\r\n      <td>{newitem.C}</td>\r\n      <td>{newitem.D}</td>\r\n      <td>{newitem.F}</td>\r\n      <td>{newitem.G}</td>\r\n      <td>{newitem.O}</td>\r\n      <td>{newitem.U}</td>\r\n      \r\n      \r\n    </tr>\r\n          })\r\n      }\r\n    \r\n    {/* <tr>\r\n      <td>2</td>\r\n      <td>Jacob</td>\r\n      <td>Thornton</td>\r\n      <td>@fat</td>\r\n    </tr>\r\n    <tr>\r\n      <td>3</td>\r\n      <td colSpan=\"2\">Larry the Bird</td>\r\n      <td>@twitter</td>\r\n    </tr> */}\r\n  </tbody>\r\n</Table>\r\n\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Readfile;\r\n"]},"metadata":{},"sourceType":"module"}