{"ast":null,"code":"var _jsxFileName = \"H:\\\\DigiKull Front-End\\\\FrontEndDev\\\\FrontEndDev2\\\\ennea-assignment\\\\exceltoreacttable\\\\src\\\\components\\\\Readfile.js\";\nimport React from 'react';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Readfile = () => {\n  const readExcelFile = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        const workBook = XLSX.read(bufferArray, {\n          type: 'buffer'\n        });\n        const worksheetname = workBook.SheetNames[0];\n        const workSheet = workBook.Sheets[worksheetname];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        resolve(data);\n      };\n\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(data => {\n      console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => {\n          const file = e.target.files[0];\n          readExcelFile(file);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Readfile;\nexport default Readfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Readfile\");","map":{"version":3,"sources":["H:/DigiKull Front-End/FrontEndDev/FrontEndDev2/ennea-assignment/exceltoreacttable/src/components/Readfile.js"],"names":["React","XLSX","Readfile","readExcelFile","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","workBook","read","type","worksheetname","SheetNames","workSheet","Sheets","data","utils","sheet_to_json","onerror","error","then","console","log","files"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAEnB,QAAMC,aAAa,GAAIC,IAAD,IAAU;AAE5B,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC5C,YAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,MAAAA,UAAU,CAACE,iBAAX,CAA6BP,IAA7B;;AAEAK,MAAAA,UAAU,CAACG,MAAX,GAAmBC,CAAD,IAAK;AACnB,cAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B;AACA,cAAMC,QAAQ,GAAGhB,IAAI,CAACiB,IAAL,CAAUJ,WAAV,EAAuB;AAACK,UAAAA,IAAI,EAAE;AAAP,SAAvB,CAAjB;AACA,cAAMC,aAAa,GAAGH,QAAQ,CAACI,UAAT,CAAoB,CAApB,CAAtB;AACA,cAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAT,CAAgBH,aAAhB,CAAlB;AACA,cAAMI,IAAI,GAAGvB,IAAI,CAACwB,KAAL,CAAWC,aAAX,CAAyBJ,SAAzB,CAAb;AACAf,QAAAA,OAAO,CAACiB,IAAD,CAAP;AACH,OAPD;;AAQIf,MAAAA,UAAU,CAACkB,OAAX,GAAsBC,KAAD,IAAW;AAC5BpB,QAAAA,MAAM,CAACoB,KAAD,CAAN;AACH,OAFD;AAGP,KAfe,CAAhB;AAgBAvB,IAAAA,OAAO,CAACwB,IAAR,CAAcL,IAAD,IAAU;AACnBM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACH,KAFD;AAGH,GArBD;;AAsBA,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAGX,CAAD,IAAK;AAC9B,gBAAMT,IAAI,GAAGS,CAAC,CAACE,MAAF,CAASiB,KAAT,CAAe,CAAf,CAAb;AACA7B,UAAAA,aAAa,CAACC,IAAD,CAAb;AACH;AAHD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAnCD;;KAAMF,Q;AAqCN,eAAeA,QAAf","sourcesContent":["import React from 'react'\r\nimport XLSX from 'xlsx';\r\n\r\nconst Readfile = () => {\r\n\r\n    const readExcelFile = (file) => {\r\n\r\n        const promise = new Promise ((resolve, reject)=>{\r\n            const fileReader = new FileReader();\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload=(e)=>{\r\n                const bufferArray = e.target.result;\r\n                const workBook = XLSX.read(bufferArray, {type: 'buffer'});\r\n                const worksheetname = workBook.SheetNames[0];\r\n                const workSheet = workBook.Sheets[worksheetname];\r\n                const data = XLSX.utils.sheet_to_json(workSheet);\r\n                resolve(data);\r\n            };\r\n                fileReader.onerror = (error) => {\r\n                    reject(error);\r\n                };\r\n        });\r\n        promise.then((data) => {\r\n            console.log(data)\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n        <div className='container'>\r\n            <input type=\"file\" onChange={(e)=>{\r\n                const file = e.target.files[0];\r\n                readExcelFile(file);\r\n            }} />\r\n        </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Readfile;\r\n"]},"metadata":{},"sourceType":"module"}